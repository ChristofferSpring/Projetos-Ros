// Generated by gencpp from file vision_msgs/Skeleton2d.msg
// DO NOT EDIT!


#ifndef VISION_MSGS_MESSAGE_SKELETON2D_H
#define VISION_MSGS_MESSAGE_SKELETON2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace vision_msgs
{
template <class ContainerAllocator>
struct Skeleton2d_
{
  typedef Skeleton2d_<ContainerAllocator> Type;

  Skeleton2d_()
    : header()
    , points()  {
    }
  Skeleton2d_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NOSE)
  #undef NOSE
#endif
#if defined(_WIN32) && defined(LEFT_EYE_INNER)
  #undef LEFT_EYE_INNER
#endif
#if defined(_WIN32) && defined(LEFT_EYE)
  #undef LEFT_EYE
#endif
#if defined(_WIN32) && defined(LEFT_EYE_OUTER)
  #undef LEFT_EYE_OUTER
#endif
#if defined(_WIN32) && defined(RIGHT_EYE_INNER)
  #undef RIGHT_EYE_INNER
#endif
#if defined(_WIN32) && defined(RIGHT_EYE)
  #undef RIGHT_EYE
#endif
#if defined(_WIN32) && defined(RIGHT_EYE_OUTER)
  #undef RIGHT_EYE_OUTER
#endif
#if defined(_WIN32) && defined(LEFT_EAR)
  #undef LEFT_EAR
#endif
#if defined(_WIN32) && defined(RIGHT_EAR)
  #undef RIGHT_EAR
#endif
#if defined(_WIN32) && defined(MOUTH_LEFT)
  #undef MOUTH_LEFT
#endif
#if defined(_WIN32) && defined(MOUTH_RIGHT)
  #undef MOUTH_RIGHT
#endif
#if defined(_WIN32) && defined(LEFT_SHOULDER)
  #undef LEFT_SHOULDER
#endif
#if defined(_WIN32) && defined(RIGHT_SHOULDER)
  #undef RIGHT_SHOULDER
#endif
#if defined(_WIN32) && defined(LEFT_ELBOW)
  #undef LEFT_ELBOW
#endif
#if defined(_WIN32) && defined(RIGHT_ELBOW)
  #undef RIGHT_ELBOW
#endif
#if defined(_WIN32) && defined(LEFT_WRIST)
  #undef LEFT_WRIST
#endif
#if defined(_WIN32) && defined(RIGHT_WRIST)
  #undef RIGHT_WRIST
#endif
#if defined(_WIN32) && defined(LEFT_PINKY)
  #undef LEFT_PINKY
#endif
#if defined(_WIN32) && defined(RIGHT_PINKY)
  #undef RIGHT_PINKY
#endif
#if defined(_WIN32) && defined(LEFT_INDEX)
  #undef LEFT_INDEX
#endif
#if defined(_WIN32) && defined(RIGHT_INDEX)
  #undef RIGHT_INDEX
#endif
#if defined(_WIN32) && defined(LEFT_THUMB)
  #undef LEFT_THUMB
#endif
#if defined(_WIN32) && defined(RIGHT_THUMB)
  #undef RIGHT_THUMB
#endif
#if defined(_WIN32) && defined(LEFT_HIP)
  #undef LEFT_HIP
#endif
#if defined(_WIN32) && defined(RIGHT_HIP)
  #undef RIGHT_HIP
#endif
#if defined(_WIN32) && defined(LEFT_KNEE)
  #undef LEFT_KNEE
#endif
#if defined(_WIN32) && defined(RIGHT_KNEE)
  #undef RIGHT_KNEE
#endif
#if defined(_WIN32) && defined(LEFT_ANKLE)
  #undef LEFT_ANKLE
#endif
#if defined(_WIN32) && defined(RIGHT_ANKLE)
  #undef RIGHT_ANKLE
#endif
#if defined(_WIN32) && defined(LEFT_HEEL)
  #undef LEFT_HEEL
#endif
#if defined(_WIN32) && defined(RIGHT_HEEL)
  #undef RIGHT_HEEL
#endif
#if defined(_WIN32) && defined(LEFT_FOOT_INDEX)
  #undef LEFT_FOOT_INDEX
#endif
#if defined(_WIN32) && defined(RIGHT_FOOT_INDEX)
  #undef RIGHT_FOOT_INDEX
#endif

  enum {
    NOSE = 0u,
    LEFT_EYE_INNER = 1u,
    LEFT_EYE = 2u,
    LEFT_EYE_OUTER = 3u,
    RIGHT_EYE_INNER = 4u,
    RIGHT_EYE = 5u,
    RIGHT_EYE_OUTER = 6u,
    LEFT_EAR = 7u,
    RIGHT_EAR = 8u,
    MOUTH_LEFT = 9u,
    MOUTH_RIGHT = 10u,
    LEFT_SHOULDER = 11u,
    RIGHT_SHOULDER = 12u,
    LEFT_ELBOW = 13u,
    RIGHT_ELBOW = 14u,
    LEFT_WRIST = 15u,
    RIGHT_WRIST = 16u,
    LEFT_PINKY = 17u,
    RIGHT_PINKY = 18u,
    LEFT_INDEX = 19u,
    RIGHT_INDEX = 20u,
    LEFT_THUMB = 21u,
    RIGHT_THUMB = 22u,
    LEFT_HIP = 23u,
    RIGHT_HIP = 24u,
    LEFT_KNEE = 25u,
    RIGHT_KNEE = 26u,
    LEFT_ANKLE = 27u,
    RIGHT_ANKLE = 28u,
    LEFT_HEEL = 29u,
    RIGHT_HEEL = 30u,
    LEFT_FOOT_INDEX = 31u,
    RIGHT_FOOT_INDEX = 32u,
  };


  typedef boost::shared_ptr< ::vision_msgs::Skeleton2d_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_msgs::Skeleton2d_<ContainerAllocator> const> ConstPtr;

}; // struct Skeleton2d_

typedef ::vision_msgs::Skeleton2d_<std::allocator<void> > Skeleton2d;

typedef boost::shared_ptr< ::vision_msgs::Skeleton2d > Skeleton2dPtr;
typedef boost::shared_ptr< ::vision_msgs::Skeleton2d const> Skeleton2dConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_msgs::Skeleton2d_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_msgs::Skeleton2d_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_msgs::Skeleton2d_<ContainerAllocator1> & lhs, const ::vision_msgs::Skeleton2d_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_msgs::Skeleton2d_<ContainerAllocator1> & lhs, const ::vision_msgs::Skeleton2d_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Skeleton2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_msgs::Skeleton2d_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Skeleton2d_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_msgs::Skeleton2d_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Skeleton2d_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_msgs::Skeleton2d_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_msgs::Skeleton2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83dc030c66a13bd3d739a4f0e6636bc5";
  }

  static const char* value(const ::vision_msgs::Skeleton2d_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83dc030c66a13bd3ULL;
  static const uint64_t static_value2 = 0xd739a4f0e6636bc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_msgs::Skeleton2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_msgs/Skeleton2d";
  }

  static const char* value(const ::vision_msgs::Skeleton2d_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_msgs::Skeleton2d_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# skeletal key landmarks (points) naming\n"
"# Follows MediapipePose Landmarker Model\n"
"# https://developers.google.com/mediapipe/solutions/vision/pose_landmarker\n"
"\n"
"uint8 NOSE             = 0 \n"
"uint8 LEFT_EYE_INNER   = 1 \n"
"uint8 LEFT_EYE         = 2 \n"
"uint8 LEFT_EYE_OUTER   = 3 \n"
"uint8 RIGHT_EYE_INNER  = 4 \n"
"uint8 RIGHT_EYE        = 5 \n"
"uint8 RIGHT_EYE_OUTER  = 6 \n"
"uint8 LEFT_EAR         = 7 \n"
"uint8 RIGHT_EAR        = 8 \n"
"uint8 MOUTH_LEFT       = 9 \n"
"uint8 MOUTH_RIGHT      = 10\n"
"uint8 LEFT_SHOULDER    = 11\n"
"uint8 RIGHT_SHOULDER   = 12\n"
"uint8 LEFT_ELBOW       = 13\n"
"uint8 RIGHT_ELBOW      = 14\n"
"uint8 LEFT_WRIST       = 15\n"
"uint8 RIGHT_WRIST      = 16\n"
"uint8 LEFT_PINKY       = 17\n"
"uint8 RIGHT_PINKY      = 18\n"
"uint8 LEFT_INDEX       = 19\n"
"uint8 RIGHT_INDEX      = 20\n"
"uint8 LEFT_THUMB       = 21\n"
"uint8 RIGHT_THUMB      = 22\n"
"uint8 LEFT_HIP         = 23\n"
"uint8 RIGHT_HIP        = 24\n"
"uint8 LEFT_KNEE        = 25\n"
"uint8 RIGHT_KNEE       = 26\n"
"uint8 LEFT_ANKLE       = 27\n"
"uint8 RIGHT_ANKLE      = 28\n"
"uint8 LEFT_HEEL        = 29\n"
"uint8 RIGHT_HEEL       = 30\n"
"uint8 LEFT_FOOT_INDEX  = 31\n"
"uint8 RIGHT_FOOT_INDEX = 32\n"
"\n"
"# Detected skeleton points array\n"
"geometry_msgs/Point[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::vision_msgs::Skeleton2d_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_msgs::Skeleton2d_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Skeleton2d_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_msgs::Skeleton2d_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_msgs::Skeleton2d_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MSGS_MESSAGE_SKELETON2D_H
